import { Mode as Mode$1 } from '../common/Mode.js';
import { __extends } from 'tslib';
import { QRData as QRData$1 } from './QRData.js';
import { UTF16 as UTF16$1 } from '../../encoding/UTF16.js';

/**
 * @module QRAlphanumeric
 * @author nuintun
 * @author Kazuhiko Arase
 */
function getCode(byte) {
    if (0x30 <= byte && byte <= 0x39) {
        // 0 - 9
        return byte - 0x30;
    }
    else if (0x41 <= byte && byte <= 0x5a) {
        // A - Z
        return byte - 0x41 + 10;
    }
    else {
        switch (byte) {
            // space
            case 0x20:
                return 36;
            // $
            case 0x24:
                return 37;
            // %
            case 0x25:
                return 38;
            // *
            case 0x2a:
                return 39;
            // +
            case 0x2b:
                return 40;
            // -
            case 0x2d:
                return 41;
            // .
            case 0x2e:
                return 42;
            // /
            case 0x2f:
                return 43;
            // :
            case 0x3a:
                return 44;
            default:
                throw new Error("illegal char: " + String.fromCharCode(byte));
        }
    }
}
var QRAlphanumeric = /*#__PURE__*/ (function (_super) {
    __extends(QRAlphanumeric, _super);
    /**
     * @constructor
     * @param {string} data
     */
    function QRAlphanumeric(data) {
        var _this = _super.call(this, Mode$1.Alphanumeric, data) || this;
        _this.bytes = UTF16$1(data);
        return _this;
    }
    /**
     * @public
     * @method write
     * @param {BitBuffer} buffer
     */
    QRAlphanumeric.prototype.write = function (buffer) {
        var i = 0;
        var bytes = this.bytes;
        var length = bytes.length;
        while (i + 1 < length) {
            buffer.put(getCode(bytes[i]) * 45 + getCode(bytes[i + 1]), 11);
            i += 2;
        }
        if (i < length) {
            buffer.put(getCode(bytes[i]), 6);
        }
    };
    /**
     * @public
     * @method getLength
     * @returns {number}
     */
    QRAlphanumeric.prototype.getLength = function () {
        return this.bytes.length;
    };
    return QRAlphanumeric;
}(QRData$1));

export { QRAlphanumeric };
