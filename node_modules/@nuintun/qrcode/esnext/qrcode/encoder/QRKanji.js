import { Mode as Mode$1 } from '../common/Mode.js';
import { __extends } from 'tslib';
import { QRData as QRData$1 } from './QRData.js';
import { SJIS as SJIS$1 } from '../../encoding/SJIS.js';

/**
 * @module QRKanji
 * @author nuintun
 * @author Kazuhiko Arase
 * @description SJIS only
 */
var QRKanji = /*#__PURE__*/ (function (_super) {
    __extends(QRKanji, _super);
    /**
     * @constructor
     * @param {string} data
     */
    function QRKanji(data) {
        var _this = _super.call(this, Mode$1.Kanji, data) || this;
        _this.bytes = SJIS$1(data);
        return _this;
    }
    /**
     * @public
     * @method write
     * @param {BitBuffer} buffer
     */
    QRKanji.prototype.write = function (buffer) {
        var index = 0;
        var bytes = this.bytes;
        var length = bytes.length;
        while (index + 1 < length) {
            var code = ((0xff & bytes[index]) << 8) | (0xff & bytes[index + 1]);
            if (0x8140 <= code && code <= 0x9ffc) {
                code -= 0x8140;
            }
            else if (0xe040 <= code && code <= 0xebbf) {
                code -= 0xc140;
            }
            code = ((code >> 8) & 0xff) * 0xc0 + (code & 0xff);
            buffer.put(code, 13);
            index += 2;
        }
    };
    /**
     * @public
     * @method getLength
     * @returns {number}
     */
    QRKanji.prototype.getLength = function () {
        return Math.floor(this.bytes.length / 2);
    };
    return QRKanji;
}(QRData$1));

export { QRKanji };
